{"version":3,"sources":["components/title/index.jsx","components/countdown/digit/index.jsx","components/countdown/index.jsx","components/controller/index.jsx","components/laps/index.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Title","props","state","title","test","isInput","this","setState","event","target","value","key","output","className","type","onChange","inputchange","onKeyPress","KeyPresshandler","onBlur","blurhandler","onClick","edithandler","Component","Digit","style","borderColor","color","countdown","time","min","sec","mili","Controller","start","pause","lap","reset","laps","starthandler","pausehandler","laphandler","resethandler","getcontroller","Laps","map","index","App","intervalid","setInterval","clearInterval","getstart","bind","getpause","getreset","getlaps","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d814338a.chunk.js","sourcesContent":["import React,{Component} from 'react'\nimport './title.css'\n\nclass Title extends Component\n{\n    constructor(props)\n    {\n        super(props)\n\n        this.state = {\n            title: 'this is dummy title',\n            test:'testing one',\n            isInput: false\n               }\n\n   }\n\nedithandler()\n{\n    this.setState({\n...this.state,\nisInput:true\n\n    })\n\n}\n\ninputchange(event)\n{\nthis.setState({\n    ...this.state,\n    title:event.target.value,\n})\n}\nKeyPresshandler(event)\n{\n    if(event.key === 'Enter' )\n    {\n    this.setState({\n\n        ...this.state,\n        isInput:false\n\n    })\n\n}\n\n}\nblurhandler(event)\n{\nthis.setState({\n...this.state,\nisInput:false\n\n})\n\n}\n\n\n\n    render() {\n        let output = null;\nif(this.state.isInput)\n{\noutput =(\n<div className=\"title\">\n<input type=\"text\" className=\"form-control\"\n value={this.state.title}\n onChange={ (event) => this.inputchange(event)}\n onKeyPress = { (event) => this.KeyPresshandler(event)}\nonBlur ={ (event) => this.blurhandler(event)}\n />\n\n\n</div>\n\n)\n// console.log('working');\n\n}\n\nelse\n{\n\n   output =\n   (\n       <div className=\"d-flex Title\">\n   <h1 className=\"display-4\">{this.state.title}</h1>\n<span className=\"ml-auto edit-icon\" onClick = { () => this.edithandler()}>Edit</span>\n</div>\n\n)\n\n}\n\n        return(\n\n/* <h1> name one is:{this.props.name} and Email:{this.props.email} </h1> */\n<div>{ output }</div>\n\n   )\n }\n\n}\n\nexport default Title\n"," \nimport React from 'react'\n\nimport './digit.css'\n\nconst Digit = (props) =>\n {\n     return(\n         <div className=\"Digit mx-2 text-center my-4\" style = { { borderColor:props.color }}>\n         <h1 className=\"display-2  py-3\" style = { { color:props.color }}>\n\n         {props.value < 10 ? `0${props.value}` : props.value}</h1>\n         </div>\n     )\n\n\n }\n\n export default Digit","import React from 'react'\n\nimport Digit from './digit/'\n\nconst countdown = (props) =>\n\n{\nreturn(\n    <div className=\"d-flex my-4\" >\n        <Digit color=\"palegreen\" value= { props.time.min } />\n        <Digit color=\"skyblue\" value= { props.time.sec } />\n        <Digit color=\"salmon\" value={ props.time.mili } />\n\n\n    </div>\n\n)\n\n}\n\nexport default countdown","import React, { Component } from 'react'\n\nclass Controller extends Component\n{\n    constructor(props)\n    {\n        super(props)\n this.state = {\n   start : true,\n   pause : false,\n   lap : false,\n   reset : false\n }\n\n    }\n\n    starthandler()\n    {\n     this.setState({\n         ...this.state,\n    start:false,\n    pause:true,\n    lap:true\n     })\nthis.props.start();\n\n    }\n\n    pausehandler()\n    {\n        this.setState({\n            ...this.state,\n            start:true,\n            pause:false,\n            reset:true,\n            lap:false,\n        })\nthis.props.pause();\n\n    }\n    resethandler()\n    {\nthis.setState({\n...this.state,\nstart:true,\nstart:true,\npause:false,\nreset:false,\nlap:false,\n})\n\nthis.props.reset();\n\n    }\n\n    laphandler()\n    {\nthis.props.laps()\n\n    }\n\n    getcontroller()\n\n    {\n        let output = null\n\nif(this.state.start && !this.state.reset)\n  {\n      output = (\n          <div>\n              <button className =\"btn btn-success btn-lg px-5\" onClick ={ (event) => this.starthandler() }>Start</button>\n          </div>\n      )\n\n\n  }\n\n  else if (this.state.pause && this.state.lap)\n    {\n        output = (\n            <div>\n                <button className =\"btn btn-primary btn-lg px-5 ml-5\" onClick ={ (event) => this.pausehandler() }>\n                Pause</button>\n\n                <button className =\"btn btn-warning btn-lg px-5 ml-5\" onClick ={ (event) => this.laphandler() }>Lap\n                </button>\n            </div>\n        )\n\n\n    }\n    else if(this.state.start && this.state.reset)\n{\n    output = (\n        <div className=\"my-6\">\n            <button className =\"btn btn-success btn-lg px-5 ml-5\" onClick ={ (event) => this.starthandler() }>\n            Start</button>\n\n            <button className =\"btn btn-danger btn-lg px-5 ml-5\" onClick ={ (event) => this.resethandler() }>Reset\n            </button>\n        </div>\n    )\n\n}\n return output;\n\n    }\n\n\n    render()\n    {\n\n        return this.getcontroller()\n\n    }\n\n}\n\nexport default Controller;"," \nimport React from \"react\";\n\nconst Laps = props => {\n  return (\n    <div className=\"\">\n      {props.laps.map((laps, index )=> {\n        return (\n\n         <ul  key={ index } className=\"list-group list-group-flush\">\n           <li className=\"list-group-item\">\n           <h4>\n            <span className=\"text-dark text\"> minutes</span>\n            <span className=\"text-danger text\"> {laps.min}</span>\n            <span className=\"text-dark text\"> Second</span>\n            <span className=\"text-danger text\"> {laps.sec}</span>\n            <span className=\"text-dark text\" > Mili</span>\n            <span className=\"text-danger text\"> {laps.mili}</span>\n</h4>\n            </li>\n            </ul>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Laps;","import React, { Component } from 'react';\nimport Title from './title'\nimport Countdown from './countdown/index'\nimport Controller from './controller/index'\nimport Laps from './laps/index'\n\nclass App extends Component {\n\n  constructor(props)\n  {\n    super(props)\nthis.state =\n   {\n  time:{\n    min:0,\n    sec:0,\n    mili:0\n     },\nlaps:[]\n\n\n  }\n\n}\n\ngetstart()\n{\n this.intervalid = setInterval(() => {\n    let min = this.state.time.min\n    let sec = this.state.time.sec\n    let mili = this.state.time.mili\n\n    if(mili >= 10)\n    {\n      sec = sec + 1\n      mili = 0\n    }\n    if(sec >= 60)\n     {\n       min = min + 1\n       sec  = 0\n     }\nthis.setState({\n...this.state,\n time :{\n   min,\n  sec,\n  mili: mili + 1\n }\n\n\n})\n\n  },100)\n\n}\n\ngetpause(){\n  clearInterval(this.intervalid)\n}\ngetreset()\n {\nthis.setState({\n  time:{\n    min:0,\n    sec:0,\n    mili:0\n     },\nlaps:[]\n\n})\n\n }\n\n getlaps()\n   {\n     let time = {\n...this.state.time\n     }\n this.setState({\n   ...this.state,\nlaps:[time, ...this.state.laps]\n })\n\n\n   }\n\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n       <div className=\"container py-5\">\n       <div className=\"row\">\n          <div className=\"col-sm-8 offset-2\">\n          <Title/>\n          <Countdown time={this.state.time} />\n<Controller\n start = {this.getstart.bind(this)}\n pause = {this.getpause.bind(this)}\nreset =  {this.getreset.bind(this)}\nlaps = {this.getlaps.bind(this)}\n />\n<Laps  laps= {this.state.laps}/>\n\n          </div>\n       </div>\n       </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}